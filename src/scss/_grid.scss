html {
  box-sizing: border-box;
}
*, *:before, *:after {
  box-sizing: inherit;
}
html, body {
  margin:0;
  padding:0;
}

%clearfix {
  *zoom: 1;
  &:before,
  &:after {
    content: " ";
    display: table;
    clear: both;
  }
}

@mixin padding($pad-size){
  margin-left: -($pad-size/2);
  padding: $pad-size 0 $pad-size $pad-size;
  &:last-of-type { padding-right: $pad-size; }
}

@mixin widthsizes($pfx){
  @each $size, $value in $widths {
    #{$pfx}#{$size}{
      width: $value;
    }
  }
}

/* Variables */
$gutter: 2.5px;
$widths: (
  '10': 10%,
  '20': 20%,
  '25': 25%,
  '30': 30%,
  '33': 33%,
  '40': 40%,
  '45': 45%,
  '50': 50%,
  '55': 55%,
  '60': 60%,
  '66': 66%,
  '70': 70%,
  '75': 75%,
  '80': 80%,
  '90': 90%,
  '100': 100%
);

/* Grid */
.row {
  @extend %clearfix;
  margin-left: -($gutter/2);
  &.no-gutter {
    .col {
      padding: 0;
    }
  }
}
.col { 
  float: left; 
  padding-left: 0;
  &:last-of-type { padding-right: 0; } 
  width: 100%;
}

/* sm sizes */
@include widthsizes('.sm');

/* md sizes */
@media only screen and (min-width: $md-breakpoint) {
  .col { padding: 0 $gutter/2; }
  @include widthsizes('.md');
}

/* lg sizes */
@media only screen and (min-width: $lg-breakpoint) {
  .row { margin-left: -$gutter; }
  .col { padding: 0 $gutter; }
  @include widthsizes('.lg');
}